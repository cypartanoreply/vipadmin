name: Django CI/CD with Uvicorn (No Docker Hub)

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          docker-compose --version

      - name: Build Docker Image
        run: |
          docker compose build
          docker images  # Confirm the build

      - name: Save Docker image as tarball
        run: |
          docker save django_app:latest -o django_app.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: django_app.tar
          path: django_app.tar

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: django_app.tar
          retention-days: 1
      - name: Clone Project onto Droplet
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USERNAME }}
          password: ${{ secrets.DROPLET_PASSWORD }}
          script: |
            # Install Git if not installed
            sudo apt-get update && sudo apt-get install -y git
            # Set up GitHub authentication using PAT
            export GITHUB_PAT=${{ secrets.GITHUBTOKEN_PAT }}
            git config --global credential.helper 'store --file=/root/.git-credentials'
            echo "https://${{ secrets.GITHUBTOKEN_PAT }}:@github.com" > /root/.git-credentials
            # Clone the latest version of the project
            if [ ! -d "/root/vipadmin" ]; then
              git clone https://github.com/username/vipadmin.git /root/vipadmin
            else
              cd /root/vipadmin && git pull origin main
            fi
      - name: Upload Docker Image to Droplet via SFTP
        uses: wlixcc/SFTP-Deploy-Action@v1.2.4
        with:
          username: ${{ secrets.DROPLET_USERNAME }}
          server: ${{ secrets.DROPLET_IP }}
          password: ${{ secrets.DROPLET_PASSWORD }}
          local_path: './django_app.tar'
          remote_path: '/root/django_app.tar'
          sftpArgs: '-o ConnectTimeout=5'

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USERNAME }}
          password: ${{ secrets.DROPLET_PASSWORD }}
          script: |
            # Load environment variables from .env file
            export $(grep -v '^#' /root/.env | xargs)
            # Load the Docker image
            docker load -i /root/django_app.tar/django_app.tar
            # Find the directory with docker-compose.yml
            COMPOSE_DIR=$(find / -name "docker-compose.yml" 2>/dev/null | xargs dirname | head -n 1)
            # Change to the directory with docker-compose.yml
            cd $COMPOSE_DIR
            # Bring down existing containers and bring up new ones
            docker compose down || true
            docker compose up -d
            # Wait for Nginx to start up
            echo "Waiting for Nginx to start..."
            #sleep 10

            # # Run Certbot to generate SSL certificate
            # docker compose run --rm certbot certonly --webroot --webroot-path=/var/www/certbot --email eslamelhadedy50@gmail.com --agree-tos --no-eff-email -d vipapi.cyparta.com 

            # Reload Nginx to apply the new certificates
            docker exec $(docker ps -q --filter="name=nginx") nginx -s reload

            # ## Clean up Certbot container
            # docker rm -f $(docker ps -a -q --filter="name=certbot") || true

            # Force exit to close the SSH session
            exit 0